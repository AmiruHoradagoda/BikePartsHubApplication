name: Build, Push and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
          
      - name: Make Maven wrapper executable
        working-directory: ./backend/bikePartsHub
        run: chmod +x mvnw
          
      - name: Run Backend Tests
        working-directory: ./backend/bikePartsHub
        run: ./mvnw test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend/bikePartsHub
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/bikepartshub-backend:latest

      - name: Build and push Frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/BikePartsHubApp
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/bikepartshub-frontend:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to DigitalOcean
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.DIGITALOCEAN_HOST }}
          username: ${{ secrets.DIGITALOCEAN_USERNAME }}
          key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
          script: |
            # Create a docker network if it doesn't exist
            docker network create bikepartshub-network || true
            
            # Pull latest images
            docker pull mysql:8.0
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/bikepartshub-backend:latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/bikepartshub-frontend:latest

            # Stop and remove old containers
            docker rm -f bikepartshub-mysql || true
            docker rm -f bikepartshub-backend || true
            docker rm -f bikepartshub-frontend || true

            # Run MySQL container
            docker run -d --name bikepartshub-mysql \
              --network bikepartshub-network \
              -p 3306:3306 \
              -e MYSQL_ROOT_PASSWORD=1234 \
              -e MYSQL_DATABASE=bikepartshub_db \
              --restart always \
              mysql:8.0

            # Wait for MySQL to initialize
            sleep 15

            # Run backend container
            docker run -d --name bikepartshub-backend \
              --network bikepartshub-network \
              -p 8080:8080 \
              -e SPRING_DATASOURCE_URL=jdbc:mysql://bikepartshub-mysql:3306/bikepartshub_db?createDatabaseIfNotExist=true \
              -e SPRING_DATASOURCE_USERNAME=root \
              -e SPRING_DATASOURCE_PASSWORD=1234 \
              --restart always \
              ${{ secrets.DOCKERHUB_USERNAME }}/bikepartshub-backend:latest

            # Run frontend container
            docker run -d --name bikepartshub-frontend \
              --network bikepartshub-network \
              -p 4200:4200 \
              --restart always \
              ${{ secrets.DOCKERHUB_USERNAME }}/bikepartshub-frontend:latest

            # Clean up unused images
            docker image prune -af
